{"mappings":"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","sources":["src/js/config.js","src/js/helpers.js","src/js/script.js"],"sourcesContent":["export const SAME_CATEGORY_API_URL = \"https://jservice.io//api/clues?category=\";\nexport const DIFFICULTY_LVL_API_URL = \"https://jservice.io//api/clues?value=\";\nexport const MAX_QUESTIONS = 15;\nexport const HELP_OPTION_CALL = \"call\";\nexport const HELP_OPTION_FIFTY = \"fifty\";\nexport const HELP_OPTION_AUDIENCE = \"audience\";\nexport const NEXT_LVL_DIFFICULTY = 200;\nexport const LEVEL_DIFFICULTY = {\n  VERY_EASY: 200,\n  EASY: 400,\n  MEDIUM: 600,\n  HARD: 800,\n  VERY_HARD: 1000,\n};\n","export const getJson = async (url) => {\n  try {\n    const res = await fetch(url);\n\n    const data = await res.json();\n\n    if (!res.ok) throw new Error(`Error: ${data.message} (${res.status})`);\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const randomValFromR = (arr) => {\n  let randomValue = arr[Math.floor(Math.random() * arr.length)];\n  return randomValue;\n};\n\nexport const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const randomUniqueMultipleElFromArr = (arr, uniqueElements, loops) => {\n  const randomEl = randomValFromR(arr);\n  while (uniqueElements.length !== loops) {\n    if (!uniqueElements.includes(randomEl)) {\n      uniqueElements.push(randomEl);\n    } else {\n      randomUniqueMultipleElFromArr(arr, uniqueElements, loops);\n    }\n  }\n};\n\nexport const removeHTMLTags = (str) => {\n  if (str === null || str === \"\") return false;\n  return str.replace(/(<([^>]+)>)/gi, \"\");\n};\n\nexport const getRandomNum = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getArrayRandomInts = (maxInitNum, count) => {\n  let maxNum = maxInitNum;\n  let minNum = 1;\n  let randomNums = [];\n\n  if (count === 1) {\n    randomNums.push(maxNum);\n    return randomNums;\n  }\n\n  while (maxNum !== 0) {\n    let randomNum = getRandomNum(minNum, maxNum);\n    randomNums.push(randomNum);\n    maxNum -= randomNum;\n  }\n\n  if (maxNum === 0 && randomNums.length > count) {\n    return getArrayRandomInts(maxInitNum, count);\n  }\n\n  if (maxNum === 0 && randomNums.length < count) {\n    const newR = new Array(count - randomNums.length);\n    const fillNewR = newR.fill(0);\n\n    const updatedRandomNums = [...randomNums, ...fillNewR];\n    return updatedRandomNums;\n  }\n\n  return randomNums;\n};\n","import {\n  SAME_CATEGORY_API_URL,\n  HELP_OPTION_AUDIENCE,\n  HELP_OPTION_CALL,\n  HELP_OPTION_FIFTY,\n  LEVEL_DIFFICULTY,\n  NEXT_LVL_DIFFICULTY,\n  MAX_QUESTIONS,\n  DIFFICULTY_LVL_API_URL,\n} from \"./config\";\nimport {\n  randomValFromR,\n  randomUniqueMultipleElFromArr,\n  getJson,\n  shuffleArray,\n  removeHTMLTags,\n  getArrayRandomInts,\n  getRandomNum,\n} from \"./helpers\";\n\nlet thisGame = {};\nclass Game {\n  static async startTheGame() {\n    UI.toggleGameUi();\n    thisGame = new GameLogic();\n    const question = await thisGame.generateQuestion();\n    UI.displayQuestion(question);\n  }\n  static endTheGame() {\n    UI.toggleGameUi();\n    UI.initUI();\n    thisGame = {};\n  }\n}\n\nclass UI {\n  static play_btn = document.querySelector(\".startingPos__btn\");\n  static game_container = document.querySelector(\".game\");\n  static starting_position = document.querySelector(\".startingPos\");\n  static answers_text_el = document.querySelectorAll(\".answer__text\");\n  static question_container = document.querySelector(\".question__text\");\n  static help_btn_container = document.querySelector(\".help__container\");\n  static answers_btn_container = document.querySelector(\".answer__container\");\n  static sidebar_btn = document.querySelector(\".sidebar__btn\");\n  static prize_list = document.querySelectorAll(\".prize__li\");\n  static overlay = document.querySelector(\".overlay\");\n  static modal = document.querySelector(\".modal\");\n  static modal_close_btn = document.querySelector(\".modal__close\");\n  static modal_text_container = document.querySelector(\".modal__text\");\n  static loader = document.querySelector(\".loader\");\n\n  static initUI() {\n    this.prize_list.forEach((el) => {\n      if (!el.classList.contains(\"prize__current\")) return;\n      el.classList.remove(\"prize__current\");\n    });\n\n    const allHelpBnt = this.help_btn_container.querySelectorAll(\"button\");\n    const allAnswersBtn = this.answers_btn_container.querySelectorAll(\"button\");\n\n    [...allHelpBnt, ...allAnswersBtn].forEach((btn) => {\n      if (btn.classList.contains(\"btn--disabled\") || btn.disabled) {\n        this.activateBtn(btn);\n      }\n    });\n\n    [this.question_container, ...this.answers_text_el].forEach(\n      (el) => (el.innerText = \"\")\n    );\n\n    if (this.sidebar_btn.closest(\"aside\").classList.contains(\"slide\")) {\n      this.toggleSidebar();\n    }\n  }\n\n  static toggleLoader() {\n    this.loader.classList.toggle(\"hidden\");\n  }\n\n  static toggleSidebar() {\n    const btn = this.sidebar_btn;\n    const sidebar = btn.closest(\"aside\");\n\n    btn.children[0].classList.toggle(\"rotate\");\n    sidebar.classList.toggle(\"slide\");\n  }\n\n  static closeModal() {\n    this.modal.classList.add(\"hidden\");\n    this.overlay.classList.add(\"hidden\");\n    this.modal_text_container.innerHTML = \"\";\n  }\n\n  static openModal(messages = []) {\n    messages.forEach((msg) => {\n      const msgEl = document.createElement(\"p\");\n      const msgText = document.createTextNode(removeHTMLTags(msg));\n      msgEl.appendChild(msgText);\n      this.modal_text_container.insertAdjacentElement(\"beforeend\", msgEl);\n    });\n\n    this.modal.classList.remove(\"hidden\");\n    this.overlay.classList.remove(\"hidden\");\n  }\n\n  static selectPrize() {\n    const currentIndex = MAX_QUESTIONS - thisGame.currentQuestion;\n    const prevIndex = currentIndex + 1;\n    if (this.prize_list[prevIndex]) {\n      this.prize_list[prevIndex].classList.remove(\"prize__current\");\n    }\n    this.prize_list[currentIndex].classList.add(\"prize__current\");\n  }\n\n  static disableBtn(btn) {\n    btn.disabled = true;\n    btn.classList.add(\"btn--disabled\");\n  }\n\n  static activateBtn(btn) {\n    btn.disabled = false;\n    btn.classList.remove(\"btn--disabled\");\n  }\n\n  static toggleGameUi() {\n    this.starting_position.classList.toggle(\"hidden\");\n    this.game_container.classList.toggle(\"hidden\");\n    this.sidebar_btn.closest(\"aside\").classList.toggle(\"hidden\");\n  }\n\n  static displayQuestion(question) {\n    this.question_container.innerText = question;\n\n    const allAnswers = shuffleArray(thisGame.getAllAnswers());\n\n    this.answers_text_el.forEach((cont, i) => {\n      cont.innerText = removeHTMLTags(allAnswers[i]);\n    });\n  }\n\n  static hideTwoWrongAnswers(wrongAnswers) {\n    this.answers_text_el.forEach((text) => {\n      if (wrongAnswers.includes(text.innerText)) {\n        this.disableBtn(text.parentElement);\n      }\n    });\n  }\n\n  static displayAudienceHelp(answers) {\n    const [correct, ...rest] = answers;\n\n    const allAnswers = thisGame.getAllAnswers();\n\n    const filterWrongs = allAnswers.filter(\n      (el) => el !== thisGame.currentQuestionCorrectAnswer\n    );\n\n    const audienceAnswerForCorrect = `${correct}% of audience voted for '${thisGame.currentQuestionCorrectAnswer}'`;\n\n    const restOfAudience = rest.map((ansPercent, i) => {\n      return `${ansPercent}% of audience voted for '${filterWrongs[i]}'`;\n    });\n\n    const shuffledAudienceAnswersArray = shuffleArray([\n      audienceAnswerForCorrect,\n      ...restOfAudience,\n    ]);\n\n    this.openModal(shuffledAudienceAnswersArray);\n  }\n}\n\nclass GameLogic {\n  currentQuestionCorrectAnswer = \"\";\n  allRandomWrongAnswers = [];\n  NUM_OF_WRONG_ANSWERS = 3;\n  difficulty = LEVEL_DIFFICULTY.VERY_EASY;\n  currentQuestion = 0;\n  isHelpCallUsed = false;\n  isHelpAudienceUsed = false;\n  isHelpFiftyUsed = false;\n  questionsAskedId = [];\n\n  getRandomUnqiueWrongAnswers(arr, uniqueArr, loops, correctAnswer) {\n    const randomEl = randomValFromR(arr);\n    while (uniqueArr.length !== loops) {\n      if (!uniqueArr.includes(randomEl) && randomEl.answer !== correctAnswer) {\n        uniqueArr.push(randomEl);\n      } else {\n        this.getRandomUnqiueWrongAnswers(arr, uniqueArr, loops, correctAnswer);\n      }\n    }\n  }\n\n  async getSameCategoryRandomAnswers(categoryId, correctAnswer) {\n    try {\n      let uniqueRandomWrongAnswers = [];\n\n      const sameCategoryQuestions = await getJson(\n        `${SAME_CATEGORY_API_URL}${categoryId}`\n      );\n\n      if (sameCategoryQuestions.length === 0)\n        throw new Error(`Failed to upload answers!`);\n\n      this.getRandomUnqiueWrongAnswers(\n        sameCategoryQuestions,\n        uniqueRandomWrongAnswers,\n        this.NUM_OF_WRONG_ANSWERS,\n        correctAnswer\n      );\n\n      const randomWrongAnswers = uniqueRandomWrongAnswers.map((q) => q.answer);\n\n      return randomWrongAnswers;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getNewQuestion() {\n    try {\n      const questions = await getJson(\n        `${DIFFICULTY_LVL_API_URL}${this.difficulty}`\n      );\n\n      if (questions.length === 0)\n        throw new Error(`Failed to upload new question!`);\n\n      const currentQuestionData = randomValFromR(questions);\n\n      const {\n        id,\n        category_id: curQuestionCategoryId,\n        question,\n        answer,\n      } = currentQuestionData;\n\n      if (this.questionsAskedId.includes(id)) return this.getNewQuestion();\n      this.questionsAskedId.push(id);\n\n      const randomWrongAnswers = await this.getSameCategoryRandomAnswers(\n        curQuestionCategoryId,\n        answer\n      );\n\n      const sanitizeAnswer = removeHTMLTags(answer);\n      const sanitizeWrongAnswers = randomWrongAnswers.map((ans) =>\n        removeHTMLTags(ans)\n      );\n\n      this.currentQuestionCorrectAnswer = sanitizeAnswer;\n      this.allRandomWrongAnswers = sanitizeWrongAnswers;\n\n      return question;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async generateQuestion() {\n    UI.toggleLoader();\n\n    try {\n      this.currentQuestion++;\n\n      this.difficulty = this.setNewDifficulty(\n        MAX_QUESTIONS,\n        this.currentQuestion,\n        this.difficulty\n      );\n\n      const question = await this.getNewQuestion();\n\n      return question;\n    } catch (error) {\n      UI.openModal([`Something went wrong!`, error.message]);\n    } finally {\n      UI.toggleLoader();\n    }\n  }\n\n  async checkAnswer(playerAnswer) {\n    if (playerAnswer !== this.currentQuestionCorrectAnswer) {\n      UI.openModal([\"Wrong answer. You've lost the game!\"]);\n      Game.endTheGame();\n      return;\n    }\n\n    if (this.currentQuestion < MAX_QUESTIONS) {\n      UI.selectPrize();\n\n      const newQuestion = await this.generateQuestion();\n\n      UI.answers_btn_container.querySelectorAll(\"button\").forEach((btn) => {\n        if (btn.classList.contains(\"btn--disabled\")) UI.activateBtn(btn);\n      });\n\n      UI.displayQuestion(newQuestion);\n      return;\n    }\n\n    if (this.currentQuestion === MAX_QUESTIONS) {\n      UI.selectPrize();\n      UI.openModal([\"You've won a million dollars!\"]);\n      Game.endTheGame();\n      return;\n    }\n  }\n\n  removeTwoWrongAnswers() {\n    if (this.isHelpFiftyUsed) return;\n\n    const NUM_OF_ELEMENTS_REMOVED = 2;\n    const filteredWrongAnswers = [];\n\n    randomUniqueMultipleElFromArr(\n      this.allRandomWrongAnswers,\n      filteredWrongAnswers,\n      NUM_OF_ELEMENTS_REMOVED\n    );\n\n    const updatedAllRandomWrongAnswers = this.allRandomWrongAnswers.filter(\n      (question) => {\n        return filteredWrongAnswers.every(\n          (wrongQuest) => question !== wrongQuest\n        );\n      }\n    );\n\n    this.allRandomWrongAnswers = updatedAllRandomWrongAnswers;\n\n    this.isHelpFiftyUsed = true;\n\n    return filteredWrongAnswers;\n  }\n\n  getAllAnswers() {\n    const wrongAnswers = this.allRandomWrongAnswers;\n    const allAnswers = [this.currentQuestionCorrectAnswer, ...wrongAnswers];\n    return allAnswers;\n  }\n\n  calcHelpAnswerPercent(prob) {\n    const allAnswers = this.getAllAnswers();\n    const allAudiencePercent = 100;\n    const restOfAudience = allAudiencePercent - prob;\n    return getArrayRandomInts(restOfAudience, allAnswers.length - 1);\n  }\n\n  askAudience() {\n    if (this.isHelpAudienceUsed) return;\n\n    let audAnsR = [];\n    const currDifficultyLvl = this.difficulty;\n    let probability = 0;\n\n    switch (currDifficultyLvl) {\n      case LEVEL_DIFFICULTY.VERY_EASY:\n        probability = getRandomNum(65, 75);\n        break;\n      case LEVEL_DIFFICULTY.EASY:\n        probability = getRandomNum(60, 70);\n        break;\n      case LEVEL_DIFFICULTY.MEDIUM:\n        probability = getRandomNum(45, 55);\n        break;\n      case LEVEL_DIFFICULTY.HARD:\n        probability = getRandomNum(30, 40);\n        break;\n      case LEVEL_DIFFICULTY.VERY_HARD:\n        probability = getRandomNum(20, 30);\n        break;\n      default:\n        probability = getRandomNum(1, 99);\n    }\n\n    audAnsR = this.calcHelpAnswerPercent(probability);\n\n    const answersPercent = [probability, ...audAnsR];\n\n    this.isHelpAudienceUsed = true;\n    return answersPercent;\n  }\n\n  callFriend() {\n    if (this.isHelpCallUsed) return;\n    UI.openModal([\n      `Your friend thinks the correct answer is '${this.currentQuestionCorrectAnswer}'`,\n    ]);\n    this.isHelpCallUsed = true;\n  }\n\n  setNewDifficulty(maxQuest, currQuest, difficulty) {\n    const questLeft = maxQuest - currQuest;\n\n    if (\n      questLeft === 11 ||\n      questLeft === 8 ||\n      questLeft === 5 ||\n      questLeft === 2\n    ) {\n      return (difficulty += NEXT_LVL_DIFFICULTY);\n    } else {\n      return difficulty;\n    }\n  }\n\n  useHelp(e) {\n    const btn = e.target.closest(\".help__btn\");\n\n    if (!btn) return;\n\n    if (btn.dataset.option === HELP_OPTION_CALL) this.callFriend();\n\n    if (btn.dataset.option === HELP_OPTION_AUDIENCE) {\n      const [correct, ...rest] = this.askAudience();\n      UI.displayAudienceHelp([correct, ...rest]);\n    }\n\n    if (btn.dataset.option === HELP_OPTION_FIFTY) {\n      const twoWrongAnswers = this.removeTwoWrongAnswers();\n      UI.hideTwoWrongAnswers(twoWrongAnswers);\n    }\n\n    UI.disableBtn(btn);\n  }\n\n  playerAnswer(e) {\n    const btn = e.target.closest(\".answer__btn\");\n\n    if (!btn) return;\n\n    if (btn.classList.contains(\"btn--disabled\") && btn.disabled) return;\n\n    const playerAnswer = btn.children[0].innerText;\n\n    this.checkAnswer(playerAnswer);\n  }\n}\n\nUI.play_btn.addEventListener(\"click\", Game.startTheGame);\nUI.help_btn_container.addEventListener(\"click\", (e) => {\n  thisGame.useHelp(e);\n});\nUI.answers_btn_container.addEventListener(\"click\", (e) => {\n  thisGame.playerAnswer(e);\n});\nUI.sidebar_btn.addEventListener(\"click\", UI.toggleSidebar.bind(UI));\ndocument.addEventListener(\"keydown\", function (e) {\n  if (e.key !== \"Escape\") return;\n  UI.closeModal();\n});\nUI.modal_close_btn.addEventListener(\"click\", UI.closeModal.bind(UI));\nUI.overlay.addEventListener(\"click\", UI.closeModal.bind(UI));\n"],"names":["$638a9a2b3a95d7a6$export$cb3b18a6b6e945b","$14f4eefa9b31a4c9$export$a75c676177490cac","async","url","res","fetch","data","json","ok","Error","message","status","error","$14f4eefa9b31a4c9$export$290e7550a4afb8b2","arr","Math","floor","random","length","$14f4eefa9b31a4c9$export$7ac3a88d34a76e7","array","i","j","$14f4eefa9b31a4c9$export$b595f180b5146426","uniqueElements","loops","randomEl","includes","push","$14f4eefa9b31a4c9$export$73bc3f190ba41e4","str","replace","$14f4eefa9b31a4c9$export$937fe3a9b8c11527","min","max","$14f4eefa9b31a4c9$export$4cd008d364115ef8","maxInitNum","count","maxNum","randomNums","randomNum","fillNewR","Array","fill","$a91cd049e9b5247f$var$thisGame","$a91cd049e9b5247f$var$Game","$a91cd049e9b5247f$var$UI","toggleGameUi","$a91cd049e9b5247f$var$GameLogic","question","generateQuestion","displayQuestion","initUI","document","querySelector","querySelectorAll","this","prize_list","forEach","el","classList","contains","remove","help_btn_container","answers_btn_container","btn","disabled","activateBtn","question_container","answers_text_el","innerText","sidebar_btn","closest","toggleSidebar","loader","toggle","sidebar","children","modal","add","overlay","modal_text_container","innerHTML","messages","msg","msgEl","createElement","msgText","createTextNode","appendChild","insertAdjacentElement","currentIndex","currentQuestion","prevIndex","btn2","btn1","starting_position","game_container","question1","allAnswers","getAllAnswers","cont","wrongAnswers","text","disableBtn","parentElement","answers","correct","rest","filterWrongs","filter","currentQuestionCorrectAnswer","audienceAnswerForCorrect","restOfAudience","map","ansPercent","shuffledAudienceAnswersArray","openModal","allRandomWrongAnswers","NUM_OF_WRONG_ANSWERS","difficulty","isHelpCallUsed","isHelpAudienceUsed","isHelpFiftyUsed","questionsAskedId","getRandomUnqiueWrongAnswers","uniqueArr","correctAnswer","answer","categoryId","correctAnswer1","uniqueRandomWrongAnswers","sameCategoryQuestions","q","questions","currentQuestionData","id","category_id","curQuestionCategoryId","getNewQuestion","randomWrongAnswers","getSameCategoryRandomAnswers","sanitizeAnswer","sanitizeWrongAnswers","ans","toggleLoader","setNewDifficulty","playerAnswer","endTheGame","selectPrize","newQuestion","removeTwoWrongAnswers","filteredWrongAnswers","updatedAllRandomWrongAnswers","every","wrongQuest","calcHelpAnswerPercent","prob","askAudience","audAnsR","probability","answersPercent","callFriend","maxQuest","currQuest","questLeft","useHelp","e2","target","dataset","option","displayAudienceHelp","twoWrongAnswers","hideTwoWrongAnswers","e1","checkAnswer","play_btn","addEventListener","startTheGame","e","bind","key","closeModal","modal_close_btn"],"version":3,"file":"index.423d88c3.js.map"}