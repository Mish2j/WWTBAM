{"mappings":"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","sources":["src/js/config.js","src/js/helpers.js","src/js/script.js"],"sourcesContent":["export const API_URL =\n  \"https://opentdb.com/api.php?amount=1&type=multiple&difficulty=\";\nexport const MAX_QUESTIONS = 15;\nexport const HELP_OPTION_CALL = \"call\";\nexport const HELP_OPTION_FIFTY = \"fifty\";\nexport const HELP_OPTION_AUDIENCE = \"audience\";\nexport const LEVEL_DIFFICULTY = {\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n};\n","export const getJson = async (url) => {\n  try {\n    const res = await fetch(url);\n\n    const data = await res.json();\n\n    if (!res.ok) throw new Error(`Error: ${data.message} (${res.status})`);\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n};\n\nconst randomValFromR = (arr) => {\n  let randomValue = arr[Math.floor(Math.random() * arr.length)];\n  return randomValue;\n};\n\nexport const shuffleArray = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n\nexport const randomUniqueMultipleElFromArr = (arr, uniqueElements, loops) => {\n  const randomEl = randomValFromR(arr);\n  while (uniqueElements.length !== loops) {\n    if (!uniqueElements.includes(randomEl)) {\n      uniqueElements.push(randomEl);\n    } else {\n      randomUniqueMultipleElFromArr(arr, uniqueElements, loops);\n    }\n  }\n};\n\nexport const getRandomNum = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getArrayRandomInts = (maxInitNum, count) => {\n  let maxNum = maxInitNum;\n  let minNum = 1;\n  let randomNums = [];\n\n  if (count === 1) {\n    randomNums.push(maxNum);\n    return randomNums;\n  }\n\n  while (maxNum !== 0) {\n    let randomNum = getRandomNum(minNum, maxNum);\n    randomNums.push(randomNum);\n    maxNum -= randomNum;\n  }\n\n  if (maxNum === 0 && randomNums.length > count) {\n    return getArrayRandomInts(maxInitNum, count);\n  }\n\n  if (maxNum === 0 && randomNums.length < count) {\n    const newR = new Array(count - randomNums.length);\n    const fillNewR = newR.fill(0);\n\n    const updatedRandomNums = [...randomNums, ...fillNewR];\n    return updatedRandomNums;\n  }\n\n  return randomNums;\n};\n\nexport const decodeHTML = (str) => {\n  let parser = new DOMParser();\n  let dom = parser.parseFromString(\"<!doctype html><body>\" + str, \"text/html\");\n  let decodedString = dom.body.textContent;\n  return decodedString;\n};\n","import {\n  HELP_OPTION_AUDIENCE,\n  HELP_OPTION_CALL,\n  HELP_OPTION_FIFTY,\n  LEVEL_DIFFICULTY,\n  MAX_QUESTIONS,\n  API_URL,\n} from \"./config\";\nimport {\n  randomUniqueMultipleElFromArr,\n  getJson,\n  shuffleArray,\n  getArrayRandomInts,\n  getRandomNum,\n  decodeHTML,\n} from \"./helpers\";\n\n(function () {\n  let thisGame = {};\n  class Game {\n    static async startTheGame() {\n      UI.toggleGameUi();\n      thisGame = new GameLogic();\n      const question = await thisGame.generateQuestion();\n      UI.displayQuestion(question);\n    }\n    static endTheGame() {\n      UI.toggleGameUi();\n      UI.initUI();\n      thisGame = {};\n    }\n  }\n\n  class UI {\n    static play_btn = document.querySelector(\".startingPos__btn\");\n    static #game_container = document.querySelector(\".game\");\n    static #starting_position = document.querySelector(\".startingPos\");\n    static #answers_text_el = document.querySelectorAll(\".answer__text\");\n    static #question_container = document.querySelector(\".question__text\");\n    static help_btn_container = document.querySelector(\".help__container\");\n    static answers_btn_container = document.querySelector(\".answer__container\");\n    static sidebar_btn = document.querySelector(\".sidebar__btn\");\n    static #prize_list = document.querySelectorAll(\".prize__li\");\n    static overlay = document.querySelector(\".overlay\");\n    static #modal = document.querySelector(\".modal\");\n    static modal_close_btn = document.querySelector(\".modal__close\");\n    static #modal_text_container = document.querySelector(\".modal__text\");\n    static #loader = document.querySelector(\".loader\");\n\n    static initUI() {\n      this.#prize_list.forEach((el) => {\n        if (!el.classList.contains(\"prize__current\")) return;\n        el.classList.remove(\"prize__current\");\n      });\n\n      const allHelpBnt = this.help_btn_container.querySelectorAll(\"button\");\n      const allAnswersBtn =\n        this.answers_btn_container.querySelectorAll(\"button\");\n\n      [...allHelpBnt, ...allAnswersBtn].forEach((btn) => {\n        if (btn.classList.contains(\"btn--disabled\") || btn.disabled) {\n          this.activateBtn(btn);\n        }\n      });\n\n      [this.#question_container, ...this.#answers_text_el].forEach(\n        (el) => (el.innerText = \"\")\n      );\n\n      if (this.sidebar_btn.closest(\"aside\").classList.contains(\"slide\")) {\n        this.toggleSidebar();\n      }\n    }\n\n    static toggleLoader() {\n      this.#loader.classList.toggle(\"hidden\");\n    }\n\n    static toggleSidebar() {\n      const btn = this.sidebar_btn;\n      const sidebar = btn.closest(\"aside\");\n\n      btn.children[0].classList.toggle(\"rotate\");\n      sidebar.classList.toggle(\"slide\");\n    }\n\n    static closeModal() {\n      this.#modal.classList.add(\"hidden\");\n      this.overlay.classList.add(\"hidden\");\n      this.#modal_text_container.innerHTML = \"\";\n    }\n\n    static openModal(messages = []) {\n      messages.forEach((msg) => {\n        const msgEl = document.createElement(\"p\");\n        const msgText = document.createTextNode(msg);\n        msgEl.appendChild(msgText);\n        this.#modal_text_container.insertAdjacentElement(\"beforeend\", msgEl);\n      });\n\n      this.#modal.classList.remove(\"hidden\");\n      this.overlay.classList.remove(\"hidden\");\n    }\n\n    static selectPrize() {\n      const currentIndex = MAX_QUESTIONS - thisGame.currentQuestion;\n      const prevIndex = currentIndex + 1;\n      if (this.#prize_list[prevIndex]) {\n        this.#prize_list[prevIndex].classList.remove(\"prize__current\");\n      }\n      this.#prize_list[currentIndex].classList.add(\"prize__current\");\n    }\n\n    static disableBtn(btn) {\n      btn.disabled = true;\n      btn.classList.add(\"btn--disabled\");\n    }\n\n    static activateBtn(btn) {\n      btn.disabled = false;\n      btn.classList.remove(\"btn--disabled\");\n    }\n\n    static toggleGameUi() {\n      this.#starting_position.classList.toggle(\"hidden\");\n      this.#game_container.classList.toggle(\"hidden\");\n      this.sidebar_btn.closest(\"aside\").classList.toggle(\"hidden\");\n    }\n\n    static displayQuestion(question) {\n      this.#question_container.innerText = question;\n\n      const allAnswers = shuffleArray(thisGame.getAllAnswers());\n\n      this.#answers_text_el.forEach((cont, i) => {\n        cont.innerText = allAnswers[i];\n      });\n    }\n\n    static hideTwoWrongAnswers(wrongAnswers) {\n      this.#answers_text_el.forEach((text) => {\n        if (wrongAnswers.includes(text.innerText))\n          this.disableBtn(text.parentElement);\n      });\n    }\n\n    static displayAudienceHelp(answers) {\n      const [correct, ...rest] = answers;\n\n      const allAnswers = thisGame.getAllAnswers();\n\n      const filterWrongs = allAnswers.filter(\n        (el) => el !== thisGame.currentQuestionCorrectAnswer\n      );\n\n      const audienceVoteForCorrect = `${correct}% of audience voted for '${thisGame.currentQuestionCorrectAnswer}'`;\n\n      const restOfAudience = rest.map((ansPercent, i) => {\n        return `${ansPercent}% of audience voted for '${filterWrongs[i]}'`;\n      });\n\n      const shuffledAudienceAnswersArray = shuffleArray([\n        audienceVoteForCorrect,\n        ...restOfAudience,\n      ]);\n\n      this.openModal(shuffledAudienceAnswersArray);\n    }\n  }\n\n  class GameLogic {\n    currentQuestionCorrectAnswer = \"\";\n    currentQuestion = 0;\n    #allIncorrectAnswers = [];\n    #difficulty = LEVEL_DIFFICULTY.EASY;\n    #isHelpCallUsed = false;\n    #isHelpAudienceUsed = false;\n    #isHelpFiftyUsed = false;\n    #questionsAsked = [];\n\n    // remove html encoded chars\n    async #getNewQuestionData() {\n      try {\n        const responseData = await getJson(API_URL + this.#difficulty);\n\n        if (responseData.results.length === 0)\n          throw new Error(`Failed to upload new question!`);\n\n        const questionData = responseData.results[0];\n\n        const {\n          question,\n          correct_answer: answer,\n          incorrect_answers: incorrectAnswers,\n        } = questionData;\n\n        const decodedQuestion = decodeHTML(question);\n        const decodedAnswer = decodeHTML(answer);\n        const decodedIncorrectAnswers = incorrectAnswers.map((incAnswer) =>\n          decodeHTML(incAnswer)\n        );\n\n        if (this.#questionsAsked.includes(decodedQuestion))\n          return this.#getNewQuestionData();\n        this.#questionsAsked.push(decodedQuestion);\n\n        this.currentQuestionCorrectAnswer = decodedAnswer;\n        this.#allIncorrectAnswers = decodedIncorrectAnswers;\n\n        return { decodedQuestion, decodedAnswer, decodedIncorrectAnswers };\n      } catch (error) {\n        throw error;\n      }\n    }\n\n    async generateQuestion() {\n      UI.toggleLoader();\n\n      try {\n        this.currentQuestion++;\n\n        this.#difficulty = this.#setNewDifficulty(\n          MAX_QUESTIONS,\n          this.currentQuestion,\n          this.#difficulty\n        );\n\n        const { decodedQuestion: question } = await this.#getNewQuestionData();\n\n        return question;\n      } catch (error) {\n        UI.openModal([`Something went wrong!`, error.message]);\n      } finally {\n        UI.toggleLoader();\n      }\n    }\n\n    async #checkAnswer(playerAnswer) {\n      if (playerAnswer !== this.currentQuestionCorrectAnswer) {\n        UI.openModal([\"Wrong answer. You've lost the game!\"]);\n        Game.endTheGame();\n        return;\n      }\n\n      if (this.currentQuestion < MAX_QUESTIONS) {\n        UI.selectPrize();\n\n        const newQuestion = await this.generateQuestion();\n\n        UI.answers_btn_container.querySelectorAll(\"button\").forEach((btn) => {\n          if (btn.classList.contains(\"btn--disabled\")) UI.activateBtn(btn);\n        });\n\n        UI.displayQuestion(newQuestion);\n        return;\n      }\n\n      if (this.currentQuestion === MAX_QUESTIONS) {\n        UI.selectPrize();\n        UI.openModal([\"You've won a million dollars!\"]);\n        Game.endTheGame();\n        return;\n      }\n    }\n\n    #removeTwoWrongAnswers() {\n      if (this.#isHelpFiftyUsed) return;\n\n      const NUM_OF_ELEMENTS_REMOVED = 2;\n      const filteredWrongAnswers = [];\n\n      randomUniqueMultipleElFromArr(\n        this.#allIncorrectAnswers,\n        filteredWrongAnswers,\n        NUM_OF_ELEMENTS_REMOVED\n      );\n\n      const updatedAllIncorrectAnswers = this.#allIncorrectAnswers.filter(\n        (incorrectAnswer) => {\n          return filteredWrongAnswers.every(\n            (removedIncorrectAnswer) =>\n              incorrectAnswer !== removedIncorrectAnswer\n          );\n        }\n      );\n\n      this.#allIncorrectAnswers = updatedAllIncorrectAnswers;\n      this.#isHelpFiftyUsed = true;\n      return filteredWrongAnswers;\n    }\n\n    getAllAnswers() {\n      const allAnswers = [\n        this.currentQuestionCorrectAnswer,\n        ...this.#allIncorrectAnswers,\n      ];\n      return allAnswers;\n    }\n\n    #calcHelpAnswerPercent(correctAnswerProbabilityPercent) {\n      const allAnswers = this.getAllAnswers();\n      const ALL_AUDIENCE_PERCENT = 100;\n      const restOfAudience =\n        ALL_AUDIENCE_PERCENT - correctAnswerProbabilityPercent;\n      return getArrayRandomInts(restOfAudience, allAnswers.length - 1);\n    }\n\n    #askAudience() {\n      if (this.#isHelpAudienceUsed) return;\n\n      let audienceAnswerPercent = [];\n      const currDifficultyLvl = this.#difficulty;\n      let correctAnswerProbabilityPercent = 0;\n\n      switch (currDifficultyLvl) {\n        case LEVEL_DIFFICULTY.EASY:\n          correctAnswerProbabilityPercent = getRandomNum(55, 70);\n          break;\n        case LEVEL_DIFFICULTY.MEDIUM:\n          correctAnswerProbabilityPercent = getRandomNum(40, 55);\n          break;\n        case LEVEL_DIFFICULTY.HARD:\n          correctAnswerProbabilityPercent = getRandomNum(25, 40);\n          break;\n        default:\n          correctAnswerProbabilityPercent = getRandomNum(1, 99);\n      }\n\n      audienceAnswerPercent = this.#calcHelpAnswerPercent(\n        correctAnswerProbabilityPercent\n      );\n\n      const answersPercent = [\n        correctAnswerProbabilityPercent,\n        ...audienceAnswerPercent,\n      ];\n\n      this.#isHelpAudienceUsed = true;\n      return answersPercent;\n    }\n\n    #callFriend() {\n      if (this.#isHelpCallUsed) return;\n      UI.openModal([\n        `Your friend thinks the correct answer is '${this.currentQuestionCorrectAnswer}'`,\n      ]);\n      this.#isHelpCallUsed = true;\n    }\n\n    #setNewDifficulty(maxQuest, currQuest, difficulty) {\n      const questLeft = maxQuest - currQuest;\n      if (questLeft === 10) difficulty = LEVEL_DIFFICULTY.MEDIUM;\n      if (questLeft === 5) difficulty = LEVEL_DIFFICULTY.HARD;\n      return difficulty;\n    }\n\n    useHelp(event) {\n      const btn = event.target.closest(\".help__btn\");\n\n      if (!btn) return;\n\n      if (btn.dataset.option === HELP_OPTION_CALL) this.#callFriend();\n\n      if (btn.dataset.option === HELP_OPTION_AUDIENCE) {\n        const [correct, ...rest] = this.#askAudience();\n        UI.displayAudienceHelp([correct, ...rest]);\n      }\n\n      if (btn.dataset.option === HELP_OPTION_FIFTY) {\n        const twoWrongAnswers = this.#removeTwoWrongAnswers();\n        UI.hideTwoWrongAnswers(twoWrongAnswers);\n      }\n\n      UI.disableBtn(btn);\n    }\n\n    playerAnswer(event) {\n      const btn = event.target.closest(\".answer__btn\");\n\n      if (!btn) return;\n\n      if (btn.classList.contains(\"btn--disabled\") && btn.disabled) return;\n\n      const playerAnswer = btn.children[1].innerText;\n\n      this.#checkAnswer(playerAnswer);\n    }\n  }\n\n  UI.play_btn.addEventListener(\"click\", Game.startTheGame);\n  UI.help_btn_container.addEventListener(\"click\", (event) => {\n    thisGame.useHelp(event);\n  });\n  UI.answers_btn_container.addEventListener(\"click\", (event) => {\n    thisGame.playerAnswer(event);\n  });\n  UI.sidebar_btn.addEventListener(\"click\", UI.toggleSidebar.bind(UI));\n  document.addEventListener(\"keydown\", function (event) {\n    if (event.key !== \"Escape\") return;\n    UI.closeModal();\n  });\n  UI.modal_close_btn.addEventListener(\"click\", UI.closeModal.bind(UI));\n  UI.overlay.addEventListener(\"click\", UI.closeModal.bind(UI));\n})();\n"],"names":["$638a9a2b3a95d7a6$export$cb3b18a6b6e945b","$14f4eefa9b31a4c9$export$7ac3a88d34a76e7","array","i","length","j","Math","floor","random","$14f4eefa9b31a4c9$export$b595f180b5146426","arr","uniqueElements","loops","randomEl","$14f4eefa9b31a4c9$var$randomValFromR","includes","push","$14f4eefa9b31a4c9$export$937fe3a9b8c11527","min","max","$14f4eefa9b31a4c9$export$4cd008d364115ef8","maxInitNum","count","maxNum","randomNums","randomNum","fillNewR","Array","fill","$14f4eefa9b31a4c9$export$f045cb747ce77a19","str","DOMParser","parseFromString","body","textContent","thisGame","Game","UI","toggleGameUi","GameLogic","question","generateQuestion","displayQuestion","initUI","document","querySelector","querySelectorAll","this","prize_list","forEach","el","classList","contains","remove","help_btn_container","answers_btn_container","btn","disabled","activateBtn","question_container","answers_text_el","innerText","sidebar_btn","closest","toggleSidebar","loader","toggle","sidebar","children","modal","add","overlay","modal_text_container","innerHTML","messages","msg","msgEl","createElement","msgText","createTextNode","appendChild","insertAdjacentElement","currentIndex","currentQuestion","prevIndex","btn2","btn1","starting_position","game_container","allAnswers","getAllAnswers","cont","wrongAnswers","text","disableBtn","parentElement","answers","correct","rest","filterWrongs","filter","currentQuestionCorrectAnswer","audienceVoteForCorrect","restOfAudience","map","ansPercent","shuffledAudienceAnswersArray","openModal","allIncorrectAnswers","difficulty","isHelpCallUsed","isHelpAudienceUsed","isHelpFiftyUsed","questionsAsked","responseData","async","url","res","fetch","data","json","ok","Error","message","status","error","$14f4eefa9b31a4c9$export$a75c676177490cac","results","questionData","correct_answer","answer","incorrect_answers","incorrectAnswers","decodedQuestion","decodedAnswer","decodedIncorrectAnswers","incAnswer","getNewQuestionData","toggleLoader","setNewDifficulty","playerAnswer","endTheGame","selectPrize","newQuestion","removeTwoWrongAnswers","filteredWrongAnswers","updatedAllIncorrectAnswers","incorrectAnswer","every","removedIncorrectAnswer","calcHelpAnswerPercent","correctAnswerProbabilityPercent","askAudience","audienceAnswerPercent","answersPercent","callFriend","maxQuest","currQuest","questLeft","useHelp","event2","target","dataset","option","displayAudienceHelp","twoWrongAnswers","hideTwoWrongAnswers","event1","checkAnswer","play_btn","addEventListener","startTheGame","event","bind","key","closeModal","modal_close_btn"],"version":3,"file":"index.26731f9d.js.map"}